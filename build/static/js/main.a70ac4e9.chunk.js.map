{"version":3,"sources":["logo.svg","component/Header/Header.js","component/Loading/Loading.js","component/News/News.js","token.js","view/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","list","this","props","category","map","dt","index","key","onClick","populateNews","className","Component","Loading","id","style","display","showloading","News","state","newsList","convertDate","bind","val","replace","newsData","data","src","urlToImage","width","alt","title","description","href","url","target","source","name","publishedAt","loadMore","thisCategory","buttonLoad","loading","token","newsapp","Home","currentCategory","buttonLoading","page","changeCategory","loadmorearticles","execLoad","fetch","then","response","json","res","articles","length","setState","catch","err","console","log","concat","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a70ac4e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\n\nexport default class Header extends Component {\n    render() {\n        const list = this.props.category.map((dt, index) =>\n            <span key={index} onClick={() => this.props.populateNews(dt)}>{dt}</span>\n        );\n        return (\n            <div className=\"menu__category\">{list}</div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Loading extends Component {\n    render() {\n        return (\n            <div className=\"loader__container\" id=\"loader\" style={{ display: this.props.showloading }}>\n                <div className=\"loader\"></div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Loading from '../Loading/Loading'\n\nexport default class News extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newsList: []\n        }\n        this.convertDate = this.convertDate.bind(this);\n    }\n    convertDate(val) {\n        return val.replace(\"T\", \" \").replace(\"Z\", \" \");\n\n    }\n    render() {\n        const News = this.props.newsData.map((data, index) =>\n            <div key={index} className=\"news__container\">\n                <img src={data.urlToImage} style={{ width: '100%' }} alt=\"img\" />\n                <div className=\"news__list\">\n                    <h3>{data.title}</h3>\n                    <p>{data.description}</p>\n                    <a href={data.url} target=\"_blank\">Read more</a>\n                </div>\n                <div className=\"news__list__head\">\n                    <p>{data.source.name}</p>\n                    <p>{this.convertDate(data.publishedAt)}</p>\n                </div>\n            </div>\n        )\n        return (\n            <div>\n                <div className=\"wrapper__news\">\n                    {News}\n                    <button id=\"buttonLoad\" onClick={() => this.props.loadMore(this.props.thisCategory)} style={{ display: this.props.buttonLoad }} className=\"load__more\">load more</button>\n                </div>\n                <Loading showloading={this.props.loading} />\n            </div>\n        )\n    }\n}\n","const token = {\n    newsapp: 'de3912b84a9e46198909cc76259aa1bb'\n\n}\nexport default token;","import React, { Component } from 'react';\nimport Header from '../../component/Header/Header';\nimport News from '../../component/News/News';\nimport token from '../../token';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            category: ['general', 'technology', 'sports', 'business', 'health', 'science', 'entertainment'],\n            currentCategory: 'general',\n            data: [],\n            loading: \"block\",\n            buttonLoading: \"none\",\n            page: 1\n        }\n        this.changeCategory = this.changeCategory.bind(this)\n        this.loadmorearticles = this.loadmorearticles.bind(this);\n        this.execLoad = this.execLoad.bind(this);\n\n    }\n    \n    componentDidMount() { \n\n        fetch('https://newsapi.org/v2/top-headlines?country=id&category=' + this.state.currentCategory + '&pageSize=10&page=1&apiKey=' + token.newsapp)\n            .then(response => { return response.json() })\n            .then(res => {\n                if (res.articles.length >= 10) {\n                    this.setState({\n                        data: res.articles,\n                        loading: \"none\",\n                        buttonLoading: \"block\"\n                    })\n                }\n            })\n            .catch(err => {\n                this.setState({\n                    loading: \"none\",\n                    buttonLoading: \"none\"\n                })\n            })\n    }\n    changeCategory(val) {\n        this.setState({\n            page: 1,\n            loading: \"block\",\n            buttonLoading: \"none\"\n        }, () => {\n            fetch('https://newsapi.org/v2/top-headlines?country=id&category=' + val + '&pageSize=10&apiKey=' + token.newsapp)\n                .then(response => { return response.json() })\n                .then(res => {\n                    if (res.articles.length >= 10) {\n                        this.setState({\n                            data: res.articles,\n                            loading: \"none\",\n                            buttonLoading: \"block\",\n                            currentCategory: val\n                        })\n                    }\n                })\n                .catch(err => {\n                    this.setState({\n                        loading: \"none\",\n                        buttonLoading: \"none\"\n                    })\n                })\n        })\n        console.log(val)\n    }\n    loadmorearticles(val) {\n        this.setState({\n            page: this.state.page + 1,\n            loading: \"block\",\n            buttonLoading: \"none\"\n        },\n            () => { this.execLoad(val) }\n        )\n    }\n    execLoad(val) {\n        fetch('https://newsapi.org/v2/top-headlines?country=id&category=' + this.state.currentCategory + '&pageSize=10&page=' + this.state.page + '&apiKey=' + token.newsapp)\n            .then(response => { return response.json() })\n            .then(res => {\n                console.log(res)\n                if (res.articles.length >= 10) {\n                    this.setState({\n                        data: this.state.data.concat(res.articles),\n                        loading: \"none\",\n                        buttonLoading: \"block\"\n\n                    })\n                    // loadButton.style.display = \"block\";\n                }\n                else {\n                    this.setState({\n                        data: this.state.data.concat(res.articles),\n                        loading: \"none\",\n                        buttonLoading: \"none\"\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({\n\n                    loading: \"none\",\n                    buttonLoading: \"none\"\n\n                })\n            })\n    }    \n    \n    render() {\n        return (\n            <div className=\"news__article\">\n                <Header category={this.state.category} populateNews={this.changeCategory} />\n                <News newsData={this.state.data} thisCategory={this.currentCategory} loading={this.state.loading} loadMore={this.loadmorearticles} buttonLoad={this.state.buttonLoading} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from '../src/view/Home/Home';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  render() {\n    return (\n      <Home ></Home>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}